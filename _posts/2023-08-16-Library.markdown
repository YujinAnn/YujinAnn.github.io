---
layout: post
title:  "16. Library"
date:   2023-08-05 20:07:47 -0700
categories: jekyll update
---

## Overview
***
- A set of object codes created by grouping frequently used functions.
- It makes it easier to develop and debug programs and faster to compile.
- Libraries can be used right away by linking since it is pre-compiled.
- Libraries are distinguished by static and dynamic libraries based on compile options and its usage.
- Place
	- Libraries are located in the /lib or /usr/lib directory and its format is `lib*.a` or `lib*so`.

![Screenshot from 2023-08-13 13-20-10](/img/Screenshot from 2023-08-13 13-20-10.png)



## .Static Library
***
### What is it?
- The executable code contains static library codes when compiling programs.
- Compiling functions independently to create your own static library.
- When functions need to access common data (?)
- Mainly located in `/usr/lib` on the root file system.
- Format
   - File name begins with `lib` and has an extension of `.a` form.
- Cons
   - The executable code contains library codes, which consumes memory and disk space.
   - Many copies of the same function exist in memory.

### How to make it?
- Static library is simply a set of object files `.o`.
- `ar` command makes a library archive of object files.
- `# ar [option] [library name] [object file 1] [object file 2] …`
   - library name is prefixed with `lib` and extension with `.a`.
   - Option
      - r: Add a new object to the specified library.
      - c: Create an archive if it does not exist.
      - s: Create indexes of object files inside the archive file.
         - If the `s` option is not given, indexes must be generated by using the `ranlib` command later. 
      - d: Remove an object from an existing archive file.
      - x: Extracting object codes from archive files.
      - t: Print the list of object codes in an archive file.
      - v: Show its processing procedure.

### Compiling a source file with a static library.
`# gcc -o [executable file] [source file] -L[library location] -l[library name]`
- Its compiling uses `gcc` in the same way as the normal compile method.
- The `-L` option refers to the location of the static library.
- The library name is prefixed with `-l` for the name removed `lib`.

![Screenshot from 2023-08-13 14-22-54](/img/Screenshot from 2023-08-13 14-22-54.png)

## Dynamic Library
***
### What is it?
- It is known as `shared library`.
- Executable file does not contain dynamic library codes, and it is linked to have references to the shared codes.
   - Its codes are loaded into memory when it is run.
- It can be shared and used in other executable files.
- must be located in the `/lib` directory, which is the location of standard shared libraries.
- Format
   - File names begin with `lib` and have an extension in the form `.so`.
	
### How to make it?
- Dynamic library is generated using the `gcc` command and the compile option `-shared`.
- `# gcc -shared -o [library name] [object file 1] [object file 2] …`
   - library name is prefixed with `lib` and extension with `.so`.

![Screenshot from 2023-08-13 14-34-53](/img/Screenshot from 2023-08-13 14-34-53.png)
